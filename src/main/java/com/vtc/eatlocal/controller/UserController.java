package com.vtc.eatlocal.controller;

import com.vtc.eatlocal.entity.*;
import com.vtc.eatlocal.model.CustomerCreateAccountResponse;
import com.vtc.eatlocal.model.CustomerLoginResponse;
import com.vtc.eatlocal.repository.*;
import com.vtc.eatlocal.service.EmailService;
import com.vtc.eatlocal.service.user.ChallengeStatusService;
import com.vtc.eatlocal.service.user.CustomerRewardsService;
import com.vtc.eatlocal.service.user.LiveChallengeService;
import com.vtc.eatlocal.service.user.UserAccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;

@Controller
@CrossOrigin(origins = {"http://localhost:3000", "http://192.168.1.7:3000", "http://192.168.1.7:8080", "http://eat-local.us-east-1.elasticbeanstalk.com"})
@RequestMapping(path="/user-path") // This means URL's start with /demo (after Application path)
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private CustomerCredentialsRepository customerCredentialsRepository;

    @Autowired
    private LiveChallengeService liveChallengeService;

    @Autowired
    EmailService emailService;

    @Autowired
    LiveChallengeRepository liveChallengeRepository;

    @Autowired
    ChallengeStatusService challengeStatusService;

    @Autowired
    CustomerRewardsService customerRewardsService;

    @Autowired
    UserAccountService userAccountService;

    @PostMapping(path = "/save-data") // Map ONLY POST Requests
    public @ResponseBody
    CustomerCreateAccountResponse createAccount(@RequestBody User user) {

        return userAccountService.createAccount(user);
    }

    @PostMapping(path = "/signin") // Map ONLY POST Requests
    public @ResponseBody
    CustomerLoginResponse validateCredentials(@RequestBody CustomerCredentials customerCredentialsEntered) {
        return userAccountService.validateCredentials(customerCredentialsEntered);
    }

    @GetMapping(path = "/get-all-users")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path = "/get-county-list")
    public @ResponseBody
    Set<String> getCountyList(@RequestBody List<String> cusineList) {
        return liveChallengeService.getCountyList(cusineList);
    }

    @PostMapping(path = "/get-cuisine-list")
    public @ResponseBody
    Set<String> getCuisineList(@RequestBody List<String> countyList) {
        return liveChallengeService.getCuisineList(countyList);
    }

    @GetMapping(path="/get-all-live-restaurant-names")
    public @ResponseBody Set<String> getAllLiveRestaurantNames() {
        return liveChallengeService.getRestaurantList();
    }

    @PostMapping(path = "/send-password-reset-email")
    public @ResponseBody
    CustomerLoginResponse sendPasswordResetEmail(@RequestBody User user) {
        return userAccountService.sendPasswordResetEmail(user);
    }

    @PostMapping(path = "/reset-customer-password")
    public @ResponseBody
    CustomerLoginResponse resetCustomerPassword(@RequestBody CustomerCredentials customerCredentials) {
        return userAccountService.resetCustomerPassword(customerCredentials);
    }

    @GetMapping(path="/all-live-challenges")
    public @ResponseBody Iterable<LiveChallenge> getAllLiveChallenges() {
        // This returns a JSON or XML with the users
        return liveChallengeRepository.findAll();
    }

    @GetMapping(path="/get-validated-restaurants-for-challenge")
    public @ResponseBody Iterable<Restaurant> getValidatedRestaurants(int customerId, int challengeId) {
        return challengeStatusService.getValidatedRestaurants(customerId, challengeId);
    }

    @GetMapping(path="/get-rewards")
    public @ResponseBody List<Reward> getRewards(@RequestParam int customerId) {
        return customerRewardsService.getCustomerRewards(customerId);
    }

    @GetMapping(path="/get-progress")
    public @ResponseBody List<RewardProgress> getCustomerProgress(@RequestParam int customerId) {
        return customerRewardsService.getCustomerProgress(customerId);
    }


//    @PostMapping(path="/save-customer-challenge")
//    public @ResponseBody boolean saveCustomerChallenge(CustomerChallenges customerChallenges) {
//        // This returns a JSON or XML with the users
//         customerChallengesRepository.save(customerChallenges);
//         return true;
//    }

//    @PostMapping(path="/join-challenge")
//    public @ResponseBody
//    Boolean joinChallenge (@RequestBody CustomerChallenegeAssociation customerChallenegeAssociation) {
//        Optional<LiveChallenge> byId = liveChallengeRepository.findById(customerChallenegeAssociation.getChallengeId());
//
//
//            // Store this challenge against the customerId
//            Optional<CustomerChallenges> resChallenge_db = restaurantChallengesRepository.findById(joinChallengeInfo.getRestaurantId());
//            if(resChallenge_db.isPresent()) {
//                String challengeList_from_db = resChallenge_db.get().getChallengeList();
//                String updated_challenge_list = challengeList_from_db + ", " + joinChallengeInfo.getChallengeId();
//
//                String challengeNameList_from_db = resChallenge_db.get().getChallengeNameList();
//                String updated_challengeName_list = challengeNameList_from_db + ", " + joinChallengeInfo.getChallengeName();
//
//
//                RestaurantChallenges restaurantChallenges = new RestaurantChallenges();
//                restaurantChallenges.setRestaurantId(joinChallengeInfo.getRestaurantId());
//                restaurantChallenges.setChallengeList(updated_challenge_list);
//                restaurantChallenges.setChallengeNameList(updated_challengeName_list);
//                restaurantChallengesRepository.save(restaurantChallenges);
//
//            } else {
//                RestaurantChallenges restaurantChallenges = new RestaurantChallenges();
//                restaurantChallenges.setRestaurantId(joinChallengeInfo.getRestaurantId());
//                restaurantChallenges.setChallengeList(joinChallengeInfo.getChallengeId());
//                restaurantChallenges.setChallengeNameList(joinChallengeInfo.getChallengeName());
//                restaurantChallengesRepository.save(restaurantChallenges);
//            }
//
//
//            return true;
//        }
//
//        return false;
//
//    }


//    @PostMapping(path="/join-challenge")
//    public @ResponseBody boolean joinChallenge(@RequestBody CustomerLiveChallengeComposition composition) {
//
//        User customer = composition.getCustomer();
//        LiveChallenge challenge = composition.getLiveChallenge();
//        Optional<User> byId = userRepository.findById(customer.getCustomerId());
//        if(!byId.isPresent()) {
//            return false;
//        }
//
//        customer = byId.get();
//
//        Set<LiveChallenge> customerChallenges = customer.getCustomerChallenges();
//
//        if(customerChallenges == null) {
//            customerChallenges = new HashSet<>();
//        }
//
//        customerChallenges.add(challenge);
//
//        customer.setCustomerChallenges(customerChallenges);
//
//        userRepository.save(customer);
//
//        return true;
//    }

//
//    @GetMapping("/get-customer-challenges")
//    @ResponseBody
//    public Set<LiveChallenge> getCustomerChallenges(@RequestParam Integer customerId) {
//
//        Set<LiveChallenge> customerChallenges = new HashSet<>();
//
//        Optional<User> byId = userRepository.findById(customerId);
//        if(byId.isPresent()) {
//            customerChallenges = byId.get().getCustomerChallenges();
//        }
//
//        return customerChallenges;
//
//    }


//    @PostMapping(path = "/save-customer-res-challenge")
//    public  @ResponseBody  void saveCustomerRestaurantChallenges(@RequestBody ChallengeCustomerRestaurantAssociation ccra) {
//
//        Optional<ChallengeCustomerRestaurantAssociation> ccra_db = challengeCustomerRestaurantAssociationRepository.findById(ccra.getCustomerId());
//
//        if(ccra_db.isPresent()) {
//            String new_list = ccra_db.get().getValidatedRestaurantsList() + ", " + ccra.getValidatedRestaurantsList();
//            ccra.setValidatedRestaurantsList(new_list);
//            challengeCustomerRestaurantAssociationRepository.save(ccra);
//        } else {
//            challengeCustomerRestaurantAssociationRepository.save(ccra);
//        }
//
//    }
//
//    @PostMapping(path = "/get-validated-restaurants-for-challenge")
//    public @ResponseBody
//    Iterable<Restaurant> getAllRestaurantsForChallenge(@RequestParam int customerId, @RequestParam int challengeId) {
//
//        Optional<ChallengeCustomerRestaurantAssociation> cca_db = challengeCustomerRestaurantAssociationRepository.findById(customerId);
//
//        if(cca_db.isPresent()) {
//            ChallengeCustomerRestaurantAssociation challengeCustomerRestaurantAssociation = cca_db.get();
//            List<Restaurant> output = new ArrayList<>();
//            String restaurants = challengeCustomerRestaurantAssociation.getValidatedRestaurantsList();
//            String[] split = restaurants.split(",");
//            for(String s : split) {
//                int restaurantId = Integer.parseInt(s.split(":")[0]);
//                output.add(restaurantRepository.findById(restaurantId).get());
//            }
//
//            return output;
//
//        } else {
//            return new ArrayList<>();
//        }
//
//    }

}

